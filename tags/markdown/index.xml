<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Markdown on Jiyoon Park</title>
    <link>https://jiyooonp.github.io/tags/markdown.html</link>
    <description>Recent content in Markdown on Jiyoon Park</description>
    <image>
      <title>Jiyoon Park</title>
      <url>https://jiyooonp.github.io/papermod-cover.png</url>
      <link>https://jiyooonp.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Mar 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jiyooonp.github.io/tags/markdown/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Camera Mobile Manipulator</title>
      <link>https://jiyooonp.github.io/posts/glab.html</link>
      <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/glab.html</guid>
      <description> Quick Start roslaunch cmm_gazebo ridgeback_iiwa_gazebo.launch roslaunch cmm_viz mobile_manipulation_interactive_demo.launch roslaunch darknet_ros darknet_ros.launch Visual Servoing Test in real world Manipulation Replication Test in real world Default World Darknet Camera Movement in Simulation LINKS Visual Servoing:
https://github.com/savnani5/Visual-Servoing/ Object Detection cpp:
https://docs.openvino.ai/latest/omz_demos_object_detection_demo_cpp.html RGBD Camera:
https://www.stereolabs.com/docs/ros/depth-sensing/ Gazebo person
- walking robot: http://gazebosim.org/tutorials?tut=actor&amp;amp;cat=build_robot Launch roslaunch cmm_gazebo ridgeback_iiwa_gazebo.launch roslaunch cmm_viz mobile_manipulation_interactive_demo.launch roslaunch darknet_ros darknet_ros.launch rosrun cmm_darknet bounding_box_subscriber.py roslaunch realsense2_camera rs_camera.launch </description>
    </item>
    <item>
      <title>JELP: Restaurant Recommendation and Analysis Website</title>
      <link>https://jiyooonp.github.io/posts/review.html</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/review.html</guid>
      <description>JELP: Restaurant Recommendation and Analysis Website Big Data Application · Fall 2021
GITHUB
About The Project Our Project JELP is a restaurant recommendation service that also provides useful information on restaurants. Our website cannot be accessed unless a user logs into the website. Once logged in, the user has access to all rank viewing, selecting, and viewing wanted data and data manipulation!
Built With PHP SQLite HTML/CSS/JS Bootstrap Python Database Schema &amp;amp; ER diagram Overview of PHP Code Structure Demonstraion of website </description>
    </item>
    <item>
      <title>Autonomous Driving Trolley, MEME</title>
      <link>https://jiyooonp.github.io/posts/capstone.html</link>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/capstone.html</guid>
      <description>GITHUB
✨ Project Overview ‼️ Key Features Object Tracking System with YOLOv5 &amp;amp; DeepSORT Keyword Spotting: RNN model on word &amp;ldquo;미미야&amp;rdquo; Realtime Location Track with LiDAR Sensor Emergency Detection with ultrasonic Sensor Embedding System ⚒️ System Architecture 🛎️ Quick Start 본 시스템은 Ubuntu 18.04, ROS Melodic 환경에서 작동됩니다. 다음과 같은 라이브러리 설치가 필요합니다.
Python 3버전 이상 numpy scipy opencv-python sklearn torch ≥ 1.7 torchvision ≥ 0.1 pillow vizer edict Clone this repository &amp;amp; install requirements git clone https://github.</description>
    </item>
    <item>
      <title>Course Information You Need</title>
      <link>https://jiyooonp.github.io/posts/ciyn.html</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/ciyn.html</guid>
      <description>About The Project Implementing an AR application step by step using planar homographies. Finding point correspondences between two images and use these to estimate the homography between them. Then using this homography to warp images and finally implement it on AR applications.
Page Configuration front-end-bootstrap folder has all elements of our site. front-end-prototype folder has the prototype images of our site. Implementation Tools &amp;amp; Prerequisites We used Firebase, Nodejs, jQuery for back-end, Bootstrap, Chartjs for front-end and visualization.</description>
    </item>
  </channel>
</rss>
