<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jiyoon Park</title>
    <link>https://jiyooonp.github.io/</link>
    <description>Recent content on Jiyoon Park</description>
    <image>
      <title>Jiyoon Park</title>
      <url>https://jiyooonp.github.io/papermod-cover.png</url>
      <link>https://jiyooonp.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 22 Dec 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jiyooonp.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3D Reconstruction</title>
      <link>https://jiyooonp.github.io/posts/hw4.html</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/hw4.html</guid>
      <description>3D Reconstruction 16-720 Computer Vision: Homework 4 ¬∑ Fall 2022
GITHUB
About The Project Implemented an algorithm to reconstruct a 3D point cloud from a pair of images taken at different angles. Used the 8-point/7-point algorithm and triangulation to find and visualize 3D locations of corresponding image points.
Built With Python NumPy (back to top)
Results For the entire report, please refer to the Documentation
The Eight Point Algorithm for calculating the fundamental matrix The Seven Point Algorithm for calculating the fundamental matrix 3D Visualization of point cloud Bundle Adjustment using RANSAC Multi View Keypoint Reconstruction </description>
    </item>
    <item>
      <title>Augmented Reality with Planar Homographies</title>
      <link>https://jiyooonp.github.io/posts/hw3.html</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/hw3.html</guid>
      <description>Augmented Reality with Planar Homographies 16-720 Computer Vision: Homework 3 ¬∑ Fall 2022
GITHUB
About The Project Implementing an AR application step by step using planar homographies. Finding point correspondences between two images and use these to estimate the homography between them. Then using this homography to warp images and finally implement it on AR applications.
Built With Python NumPy Results For the entire report, please refer to the Documentation</description>
    </item>
    <item>
      <title>Lucas-Kanade Tracking</title>
      <link>https://jiyooonp.github.io/posts/hw2.html</link>
      <pubDate>Sat, 22 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/hw2.html</guid>
      <description>Lucas-Kanade Tracking 16-720 Computer Vision: Homework 2 ¬∑ Fall 2022
GITHUB
About The Project Implement a simple Lucas-Kanade (LK) tracker with a single template. And implement a motion subtraction method to track moving pixels in a scene. Finally, efficient tracking using inverse composition.
Built With Python NumPy Results For the entire report, please refer to the Documentation
Lucas-Kanade Tracking with One Single Template Lucas-Kanade Tracking with Template Correction Moving Object Detection Track movement in video </description>
    </item>
    <item>
      <title>Spatial Pyramid Matching for Scene Classification</title>
      <link>https://jiyooonp.github.io/posts/hw1.html</link>
      <pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/hw1.html</guid>
      <description>Spatial Pyramid Matching for Scene Classification 16-720 Computer Vision: Homework 1 ¬∑ Fall 2022
GITHUB
About The Project Implementation of a scene classification system that uses bag-of-words approach with its spatial pyramid extension.
Built With Python NumPy Pipeline Results For the entire report, please refer to the Documentation
Extracting Filter Responses Visualization of wordmaps Building A Model of the Visual Word Final accuracy of classification </description>
    </item>
    <item>
      <title>Camera Mobile Manipulator</title>
      <link>https://jiyooonp.github.io/posts/glab.html</link>
      <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/glab.html</guid>
      <description> Quick Start roslaunch cmm_gazebo ridgeback_iiwa_gazebo.launch roslaunch cmm_viz mobile_manipulation_interactive_demo.launch roslaunch darknet_ros darknet_ros.launch Visual Servoing Test in real world Manipulation Replication Test in real world Default World Darknet Camera Movement in Simulation LINKS Visual Servoing:
https://github.com/savnani5/Visual-Servoing/ Object Detection cpp:
https://docs.openvino.ai/latest/omz_demos_object_detection_demo_cpp.html RGBD Camera:
https://www.stereolabs.com/docs/ros/depth-sensing/ Gazebo person
- walking robot: http://gazebosim.org/tutorials?tut=actor&amp;amp;cat=build_robot Launch roslaunch cmm_gazebo ridgeback_iiwa_gazebo.launch roslaunch cmm_viz mobile_manipulation_interactive_demo.launch roslaunch darknet_ros darknet_ros.launch rosrun cmm_darknet bounding_box_subscriber.py roslaunch realsense2_camera rs_camera.launch </description>
    </item>
    <item>
      <title>Ridgeback Trajectory Planning</title>
      <link>https://jiyooonp.github.io/posts/tsp.html</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/tsp.html</guid>
      <description>Motivation: In taking our project to the next level, we wanted to allow our robot to draw on a large curved surface. This repository is for calculating the trajectory for following the curved wall.
Input: Mesh wall in .obj file form
Output: ridgeback trajectory
something like this:
X:-1.65, -0.86, -0.09, 1.64, 2.52, 3.6, 5.25, 5.27, 6.71, 7.09, 7.87, 9.79, 9.86 Y: -4.0, -4.34, -4.4, -4.31, -4.52, -4.04, -3.64, -3.65, -4.69, -4.</description>
    </item>
    <item>
      <title>JELP: Restaurant Recommendation and Analysis Website</title>
      <link>https://jiyooonp.github.io/posts/review.html</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/review.html</guid>
      <description>JELP: Restaurant Recommendation and Analysis Website Big Data Application ¬∑ Fall 2021
GITHUB
About The Project Our Project JELP is a restaurant recommendation service that also provides useful information on restaurants. Our website cannot be accessed unless a user logs into the website. Once logged in, the user has access to all rank viewing, selecting, and viewing wanted data and data manipulation!
Built With PHP SQLite HTML/CSS/JS Bootstrap Python Database Schema &amp;amp; ER diagram Overview of PHP Code Structure Demonstraion of website </description>
    </item>
    <item>
      <title>Autonomous Driving Trolley, MEME</title>
      <link>https://jiyooonp.github.io/posts/capstone.html</link>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/capstone.html</guid>
      <description>GITHUB
‚ú® Project Overview ‚ÄºÔ∏è Key Features Object Tracking System with YOLOv5 &amp;amp; DeepSORT Keyword Spotting: RNN model on word &amp;ldquo;ÎØ∏ÎØ∏Ïïº&amp;rdquo; Realtime Location Track with LiDAR Sensor Emergency Detection with ultrasonic Sensor Embedding System ‚öíÔ∏è System Architecture üõéÔ∏è Quick Start Î≥∏ ÏãúÏä§ÌÖúÏùÄ Ubuntu 18.04, ROS Melodic ÌôòÍ≤ΩÏóêÏÑú ÏûëÎèôÎê©ÎãàÎã§. Îã§ÏùåÍ≥º Í∞ôÏùÄ ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÑ§ÏπòÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.
Python 3Î≤ÑÏ†Ñ Ïù¥ÏÉÅ numpy scipy opencv-python sklearn torch ‚â• 1.7 torchvision ‚â• 0.1 pillow vizer edict Clone this repository &amp;amp; install requirements git clone https://github.</description>
    </item>
    <item>
      <title>Course Information You Need</title>
      <link>https://jiyooonp.github.io/posts/ciyn.html</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://jiyooonp.github.io/posts/ciyn.html</guid>
      <description>About The Project Implementing an AR application step by step using planar homographies. Finding point correspondences between two images and use these to estimate the homography between them. Then using this homography to warp images and finally implement it on AR applications.
Page Configuration front-end-bootstrap folder has all elements of our site. front-end-prototype folder has the prototype images of our site. Implementation Tools &amp;amp; Prerequisites We used Firebase, Nodejs, jQuery for back-end, Bootstrap, Chartjs for front-end and visualization.</description>
    </item>
  </channel>
</rss>
