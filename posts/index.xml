<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>PaperMod on Jiyoon Park</title>
    <link>http://localhost:1313/posts.html</link>
    <description>Recent content in PaperMod on Jiyoon Park</description>
    <image>
      <title>Jiyoon Park</title>
      <url>http://localhost:1313/papermod-cover.png</url>
      <link>http://localhost:1313/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 02 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>F1tenth Race Car</title>
      <link>http://localhost:1313/posts/f1tenth_labs.html</link>
      <pubDate>Sat, 02 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/f1tenth_labs.html</guid>
      <description>About The Project Implemented various algorithm to conduct F1Tenth Racing including pure pursuit, RRT, and RRT*.
Built With Python NumPy Emergency Braking Implemented Emergency Braking for the car using LiDAR scans and calculating the instantaneous Time to Collision (iTTC).
Wall Following Implemented PID control in the time domain to give commands to the vehicle to follow the wall. Used LiDAR data to calculate the distance from the wall.
$$ u(t)=K_{p}e(t)+K_{i}\int_{0}^{t}e(t^{\prime})dt^{\prime}+K_{d}\frac{d}{dt}(e(t)) $$</description>
    </item>
    <item>
      <title>Ultimate Pillow Fight</title>
      <link>http://localhost:1313/posts/pillow.html</link>
      <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/pillow.html</guid>
      <description>About The Project This is a soap slipping, Lego stepping, and trash bin wearing sleep helping game which allow maximum of four players to play at the same time.
Go grab 2 or 3 friends and play with them! This is a funny, easy and a BIT of WEIRD game!
Link to Download Download from official Site
Built With CPP OpenGL Blender Team members Sizhe Chen, Ray Huang, Jiyoon Park, Luka Liu</description>
    </item>
    <item>
      <title>Indi Game Development</title>
      <link>http://localhost:1313/posts/games.html</link>
      <pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/games.html</guid>
      <description>About The Project Developed indi games using CPP.
Built With CPP OpenGL Blender Tobby&amp;rsquo;s Math Class You are Tobby&amp;rsquo;s gardian for today&amp;rsquo;s math class. Tobby has to navigate around the classroom and collect materials to meet his target, but once Tobby eats a number, it does not appear again. (Also, remeber you are Tobby&amp;rsquo;s gardian, which means you have to be responsible for remebering his collections : )
Find the Real Tobby &amp;ldquo;Find the Real Tobby&amp;rdquo; innovatively blends consistency in character movement with a strategy of distinguishing the real Tobby among fakes, creating a captivating and challenging gameplay concept.</description>
    </item>
    <item>
      <title>Transformers</title>
      <link>http://localhost:1313/posts/vlr_transformer.html</link>
      <pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/vlr_transformer.html</guid>
      <description>16-824 Visual Learning and Recognition: Homework 3 · Spring 2023 · GITHUB
About The Project Implemented and trained different components of a Transformer decoder for image captioning using a subset of the COCO dataset. Additionally, a Vision Transformer (ViT) was implemented for classification on CIFAR10.
Built With Python NumPy Pytorch Results For the entire report, please refer to the Documentation</description>
    </item>
    <item>
      <title>Generative Modeling</title>
      <link>http://localhost:1313/posts/vlr_gan.html</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/vlr_gan.html</guid>
      <description>3D Reconstruction 16-824 Visual Learning and Recognition: Homework 2 · Spring 2023
GITHUB
About The Project Implemented and trained Generative Adversarial Networks (GAN) on the CUB 2011 Dataset. The primary goal was to implement GANs following provided instructions, with an emphasis on achieving specific Final FID (Fréchet Inception Distance) scores for different GAN variants: Vanilla GAN, LS-GAN, and WGAN-GP.
Built With Python NumPy Pytorch Results Vanilla GAN: Final FID 71.95487635262793</description>
    </item>
    <item>
      <title>3D Reconstruction</title>
      <link>http://localhost:1313/posts/hw4.html</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/hw4.html</guid>
      <description>3D Reconstruction 16-720 Computer Vision: Homework 4 · Fall 2022
GITHUB
About The Project Implemented an algorithm to reconstruct a 3D point cloud from a pair of images taken at different angles. Used the 8-point/7-point algorithm and triangulation to find and visualize 3D locations of corresponding image points.
Built With Python NumPy Results For the entire report, please refer to the Documentation
The Eight Point Algorithm for calculating the fundamental matrix The Seven Point Algorithm for calculating the fundamental matrix 3D Visualization of point cloud Bundle Adjustment using RANSAC Multi View Keypoint Reconstruction </description>
    </item>
    <item>
      <title>Augmented Reality with Planar Homographies</title>
      <link>http://localhost:1313/posts/hw3.html</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/hw3.html</guid>
      <description>Augmented Reality with Planar Homographies 16-720 Computer Vision: Homework 3 · Fall 2022
GITHUB
About The Project Implementing an AR application step by step using planar homographies. Finding point correspondences between two images and use these to estimate the homography between them. Then using this homography to warp images and finally implement it on AR applications.
Built With Python NumPy Results For the entire report, please refer to the Documentation</description>
    </item>
    <item>
      <title>Lucas-Kanade Tracking</title>
      <link>http://localhost:1313/posts/hw2.html</link>
      <pubDate>Sat, 22 Oct 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/hw2.html</guid>
      <description>Lucas-Kanade Tracking 16-720 Computer Vision: Homework 2 · Fall 2022
GITHUB
About The Project Implement a simple Lucas-Kanade (LK) tracker with a single template. And implement a motion subtraction method to track moving pixels in a scene. Finally, efficient tracking using inverse composition.
Built With Python NumPy Results For the entire report, please refer to the Documentation
Lucas-Kanade Tracking with One Single Template Lucas-Kanade Tracking with Template Correction Moving Object Detection Track movement in video </description>
    </item>
    <item>
      <title>Spatial Pyramid Matching for Scene Classification</title>
      <link>http://localhost:1313/posts/hw1.html</link>
      <pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/hw1.html</guid>
      <description>Spatial Pyramid Matching for Scene Classification 16-720 Computer Vision: Homework 1 · Fall 2022
GITHUB
About The Project Implementation of a scene classification system that uses bag-of-words approach with its spatial pyramid extension.
Built With Python NumPy Pipeline Results For the entire report, please refer to the Documentation
Extracting Filter Responses Visualization of wordmaps Building A Model of the Visual Word Final accuracy of classification </description>
    </item>
    <item>
      <title>Camera Mobile Manipulator</title>
      <link>http://localhost:1313/posts/glab.html</link>
      <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/glab.html</guid>
      <description> Quick Start roslaunch cmm_gazebo ridgeback_iiwa_gazebo.launch roslaunch cmm_viz mobile_manipulation_interactive_demo.launch roslaunch darknet_ros darknet_ros.launch Visual Servoing Test in real world Manipulation Replication Test in real world Default World Darknet Camera Movement in Simulation LINKS Visual Servoing:
https://github.com/savnani5/Visual-Servoing/ Object Detection cpp:
https://docs.openvino.ai/latest/omz_demos_object_detection_demo_cpp.html RGBD Camera:
https://www.stereolabs.com/docs/ros/depth-sensing/ Gazebo person
- walking robot: http://gazebosim.org/tutorials?tut=actor&amp;amp;cat=build_robot Launch roslaunch cmm_gazebo ridgeback_iiwa_gazebo.launch roslaunch cmm_viz mobile_manipulation_interactive_demo.launch roslaunch darknet_ros darknet_ros.launch rosrun cmm_darknet bounding_box_subscriber.py roslaunch realsense2_camera rs_camera.launch </description>
    </item>
    <item>
      <title>Ridgeback Trajectory Planning</title>
      <link>http://localhost:1313/posts/tsp.html</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/tsp.html</guid>
      <description>Motivation: In taking our project to the next level, we wanted to allow our robot to draw on a large curved surface. This repository is for calculating the trajectory for following the curved wall.
Input: Mesh wall in .obj file form
Output: ridgeback trajectory
something like this:
X:-1.65, -0.86, -0.09, 1.64, 2.52, 3.6, 5.25, 5.27, 6.71, 7.09, 7.87, 9.79, 9.86 Y: -4.0, -4.34, -4.4, -4.31, -4.52, -4.04, -3.64, -3.65, -4.</description>
    </item>
    <item>
      <title>JELP: Restaurant Recommendation and Analysis Website</title>
      <link>http://localhost:1313/posts/review.html</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/review.html</guid>
      <description>JELP: Restaurant Recommendation and Analysis Website Big Data Application · Fall 2021
GITHUB
About The Project Our Project JELP is a restaurant recommendation service that also provides useful information on restaurants. Our website cannot be accessed unless a user logs into the website. Once logged in, the user has access to all rank viewing, selecting, and viewing wanted data and data manipulation!
Built With PHP SQLite HTML/CSS/JS Bootstrap Python Database Schema &amp;amp; ER diagram Overview of PHP Code Structure Demonstraion of website </description>
    </item>
    <item>
      <title>Autonomous Driving Trolley, MEME</title>
      <link>http://localhost:1313/posts/capstone.html</link>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/capstone.html</guid>
      <description>GITHUB
✨ Project Overview ‼️ Key Features Object Tracking System with YOLOv5 &amp;amp; DeepSORT Keyword Spotting: RNN model on word &amp;ldquo;미미야&amp;rdquo; Realtime Location Track with LiDAR Sensor Emergency Detection with ultrasonic Sensor Embedding System ⚒️ System Architecture 🛎️ Quick Start 본 시스템은 Ubuntu 18.04, ROS Melodic 환경에서 작동됩니다. 다음과 같은 라이브러리 설치가 필요합니다.
Python 3버전 이상 numpy scipy opencv-python sklearn torch ≥ 1.7 torchvision ≥ 0.1 pillow vizer edict Clone this repository &amp;amp; install requirements git clone https://github.</description>
    </item>
    <item>
      <title>Course Information You Need</title>
      <link>http://localhost:1313/posts/ciyn.html</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ciyn.html</guid>
      <description>About The Project Implementing an AR application step by step using planar homographies. Finding point correspondences between two images and use these to estimate the homography between them. Then using this homography to warp images and finally implement it on AR applications.
Page Configuration front-end-bootstrap folder has all elements of our site. front-end-prototype folder has the prototype images of our site. Implementation Tools &amp;amp; Prerequisites We used Firebase, Nodejs, jQuery for back-end, Bootstrap, Chartjs for front-end and visualization.</description>
    </item>
  </channel>
</rss>
